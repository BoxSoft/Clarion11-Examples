

   MEMBER('TRACE.clw')                                     ! This is a MEMBER module


   INCLUDE('ABTOOLBA.INC'),ONCE
   INCLUDE('ABWINDOW.INC'),ONCE

                     MAP
                       INCLUDE('TRACE001.INC'),ONCE        !Local module procedure declarations
                       INCLUDE('TRACE003.INC'),ONCE        !Req'd for module callout resolution
                     END


!!! <summary>
!!! Generated from procedure template - Window
!!! </summary>
Main PROCEDURE 

LocalRequest         LONG                                  !
iniFileName          STRING(255)                           !
ClaVer               DECIMAL(3,1)                          !
FileDriver           STRING(20)                            !
FilesOpened          BYTE                                  !
DOSDialogHeader      CSTRING(40)                           !
DOSExtParameter      CSTRING(250)                          !
DOSTargetVariable    CSTRING(80)                           !
SpecialFolders       SpecialFolder                         !
window               WINDOW('Get/Set Tracing options for File Drivers'),AT(,,228,99),FONT('MS Sans Serif',10,COLOR:Black), |
  ICON('PREWRIT.ICO'),GRAY,IMM
                       PROMPT('File &Driver:'),AT(4,3),USE(?Driver:Prompt)
                       LIST,AT(46,3,85,10),USE(Driver),VSCROLL,DROP(5),FROM(DrvNames)
                       BUTTON('...'),AT(134,3,10,10),USE(?Edit)
                       CHECK('&Show Clarion Statements'),AT(4,21),USE(Profile)
                       CHECK('Show &record buffer contents'),AT(110,21),USE(Details)
                       CHECK('&Trace calls to back end'),AT(4,36),USE(Trace)
                       CHECK('Show &Bound Data'),AT(110,36),USE(BindData)
                       CHECK('Log file &commands generated by View engine'),AT(4,51),USE(Suppress)
                       PROMPT('&File to store tracing in:'),AT(4,66,,10),USE(?TraceFile:Prompt),DISABLE
                       ENTRY(@s255),AT(74,66,137,10),USE(TraceFile),DISABLE,IMM
                       BUTTON('...'),AT(212,66,10,10),USE(?LookupFile),DISABLE
                       BUTTON('OK'),AT(65,82,45,12),USE(?OK),DEFAULT
                       BUTTON('Cancel'),AT(121,82,45,12),USE(?Cancel)
                       BUTTON('&Apply'),AT(178,82,45,12),USE(?Apply),DISABLE
                     END

ThisWindow           CLASS(WindowManager)
Init                   PROCEDURE(),BYTE,PROC,DERIVED
Kill                   PROCEDURE(),BYTE,PROC,DERIVED
TakeAccepted           PROCEDURE(),BYTE,PROC,DERIVED
TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED
TakeSelected           PROCEDURE(),BYTE,PROC,DERIVED
TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED
                     END

Toolbar              ToolbarClass

  CODE
  GlobalResponse = ThisWindow.Run()                        ! Opens the window and starts an Accept Loop

!---------------------------------------------------------------------------
DefineListboxStyle ROUTINE
!|
!| This routine create all the styles to be shared in this window
!| It`s called after the window open
!|
!---------------------------------------------------------------------------
SetTracing ROUTINE
  DO SetDetails
  IF ~Trace
    DISABLE(?BindData)
  ELSE
    ENABLE(?BindData)
  END !IF
SetDetails ROUTINE
  !Setting the tracing details routine enables the user to set the desired tracing options
  !If driver tracing has been set previously, the tracing details for that driver will be disabled
  !unless the user adds/removes some of the existing tracing options.
  IF ~Profile
    DISABLE(?Details)
  ELSE
    ENABLE(?Details)
  END !IF
  IF ~Profile AND ~Trace
    DISABLE(?TraceFile:Prompt,?LookupFile)
  ELSE
    ENABLE(?TraceFile:Prompt,?LookupFile)
  END
  DISPLAY
GetDriverInfo  ROUTINE
  !Getting the Driver Info routine - gets the driver info and if the driver supports buffer
  !supression then will Log File&Command created by ViewEngine.
  Profile = GETINI('CW'&Driver,EQProfile, , iniFileName)
  Details = GETINI('CW'&Driver,EQDetails, , iniFileName)
  BindData = GETINI('CW'&Driver,EQBindData, , iniFileName)
  TraceFile = GETINI('CW'&Driver,EQTraceFile, , iniFileName)
  GET(Drivers,CHOICE(?Driver))
  If Drivers.SupportsTrace
    ENABLE(?Trace)
    Trace = GETINI('CW'&Driver,EQTrace, , iniFileName)
  ELSE
    DISABLE(?Trace)
  END
  If Drivers.SupportsBufferSuppression
    ENABLE(?Suppress)
    Suppress = GETINI('CW'&Driver,EQSuppress, , iniFileName)
  ELSE
    DISABLE(?Suppress)
  END
  DO SetTracing
SetDriverInfo  ROUTINE
  !Setting the available drivers routine
  IF Drivers.SupportsTrace
    PUTINI('CW'&Driver,EQTrace,Trace, iniFileName)
    PUTINI('CW'&Driver,EQBindData,BindData, iniFileName)
  END
  PUTINI('CW'&Driver,EQTraceFile,TraceFile, iniFileName)
  PUTINI('CW'&Driver,EQProfile,Profile, iniFileName)
  IF Profile
    PUTINI('CW'&Driver,EQDetails,Details, iniFileName)
  END
  IF Drivers.SupportsBufferSuppression
    PUTINI('CW'&Driver,EQSuppress,Suppress, iniFileName)
  END
MkDir               ROUTINE
  IF NOT EXISTS(iniFileName)
    SpecialFolders.CreateDir(iniFileName)
    IF ERRORCODE()
      MESSAGE('Could not access ' & CLIP(iniFileName) & '.  Error code ' & ERRORCODE() & '.  Program terminated.', 'Driver Tracing Tool', ICON:Exclamation)
      GlobalResponse = Level:Fatal
    END
  END
  

ThisWindow.Init PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  GlobalErrors.SetProcedureName('Main')
  SELF.Request = GlobalRequest                             ! Store the incoming request
  ReturnValue = PARENT.Init()
  IF ReturnValue THEN RETURN ReturnValue.
  SELF.FirstField = ?Driver:Prompt
  SELF.VCRRequest &= VCRRequest
  SELF.Errors &= GlobalErrors                              ! Set this windows ErrorManager to the global ErrorManager
  CLEAR(GlobalRequest)                                     ! Clear GlobalRequest after storing locally
  CLEAR(GlobalResponse)
  SELF.AddItem(Toolbar)
  IF SELF.Request = SelectRecord
     SELF.AddItem(?OK,RequestCancelled)                    ! Add the close control to the window manger
  ELSE
     SELF.AddItem(?OK,RequestCompleted)                    ! Add the close control to the window manger
  END
  SELF.AddItem(?Cancel,RequestCancelled)                   ! Add the cancel control to the window manager
  Relate:drvlist.Open                                      ! File drvlist used by this procedure, so make sure it's RelationManager is open
  SELF.FilesOpened = True
  ! Building the available driver list
  SET(drv:NameKey)
  LOOP
    NEXT(drvList)
    IF ERRORCODE() THEN BREAK.
    Drivers :=: drv:record
    ADD(Drivers)
    DrvNames :=: drv:record
    ADD(DrvNames)
  END
  ! Get the location of the default ini file
  ClaVer = SYSTEM {PROP:ExeVersion, 2}/1000
  iniFileName = SpecialFolders.GetDir(SV:CSIDL_APPDATA, '\SoftVelocity')
  DO MkDir
  IF GlobalResponse = Level:Fatal THEN RETURN Level:Fatal END
  iniFileName = CLIP(iniFileName) & '\Clarion'
  DO MkDir
  IF GlobalResponse = Level:Fatal THEN RETURN Level:Fatal END
  iniFileName = CLIP(iniFileName) & '\drivers.ini'
  SELF.Open(window)                                        ! Open window
  Do DefineListboxStyle
  INIMgr.Fetch('Main',window)                              ! Restore window settings from non-volatile store
  SELF.SetAlerts()
  RETURN ReturnValue


ThisWindow.Kill PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  ReturnValue = PARENT.Kill()
  IF ReturnValue THEN RETURN ReturnValue.
  IF SELF.FilesOpened
    Relate:drvlist.Close
  END
  IF SELF.Opened
    INIMgr.Update('Main',window)                           ! Save window data to non-volatile store
  END
  GlobalErrors.SetProcedureName
  RETURN ReturnValue


ThisWindow.TakeAccepted PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receive all EVENT:Accepted's
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
    CASE ACCEPTED()
    OF ?Edit
      BrowseDriverList()
    END
  ReturnValue = PARENT.TakeAccepted()
    CASE ACCEPTED()
    OF ?Profile
!Calling SetDetails routine, enabling the Apply button
      DO SetDetails
      ENABLE (?Apply)
      
    OF ?Trace
!Calling SetTracing routine, enabling the Apply button
      DO SetTracing
      ENABLE (?Apply)
      
    OF ?BindData
      ENABLE (?Apply)
    OF ?LookupFile
      ThisWindow.Update()
      !Selecting a file location for driver tracing.
      IF FILEDIALOG('Select file for trace to be stored in',TraceFile,'Log Files|*.log|All Files|*.*',4)
        ThisWindow.Reset
        ENABLE (?Apply)
      END
      
    OF ?OK
      ThisWindow.Update()
      !Calling SetDriverInfo routine
      DO SetDriverInfo
      
    OF ?Apply
      ThisWindow.Update()
!Execute SetDriverInfo routine, then disable the Apply button
      DO SetDriverInfo
      DISABLE(?Apply)
      
    END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWindow.TakeNewSelection PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all NewSelection events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
  ReturnValue = PARENT.TakeNewSelection()
    CASE FIELD()
    OF ?Driver
!Execute GetDriverInfo routine, then disable the Apply button
      DO GetDriverInfo
      DISABLE (?Apply)
    OF ?TraceFile
!If the control with input focus has changed by the user then enable the Apply button
      IF ?TraceFile{PROP:Touched}
        ENABLE(?Apply)
      END
    END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWindow.TakeSelected PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all Selected events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
  ReturnValue = PARENT.TakeSelected()
    CASE FIELD()
    OF ?Driver
!Execute DriverInfo routine and disable the Apply button
      DO GetDriverInfo
      DISABLE (?Apply)
      
    OF ?Profile
!Enable the Apply button
      ENABLE (?Apply)
      
    OF ?Details
!Enable the Apply button
      ENABLE (?Apply)
      
    OF ?Suppress
!Enable the Apply button
      ENABLE (?Apply)
      
    END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWindow.TakeWindowEvent PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all window specific events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
  ReturnValue = PARENT.TakeWindowEvent()
    CASE EVENT()
    OF EVENT:OpenWindow
!Identifying the currently highlighted Driver entry in the LIST
      ?Driver{Prop:Selected} = 1
    END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue

