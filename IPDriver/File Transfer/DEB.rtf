{\rtf1\ansi\deff0\deflang1024{\fonttbl{\f0\froman Times New Roman;}{\f1\fswiss Arial;}{\f2\fnil\fcharset0 Arial;}{\f3\fmodern Courier;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue255;}
\viewkind4\uc1\pard\brdrb\brdrs\brdrw30\brdrcf2\brsp20 \keep\keepn\fi-1526\li2246\sb120\tx2070\tx2250\tx2070\tx2250\f0\fs24 #$K\lang1033\b\f1\fs28\{bmc deb.bmp\} Debug Event Browser\par
\pard\f0\fs24 Overviews\b0\line\uldb General Overview\ulnone\v GenOverview\v0\line\uldb Programming Overview\ulnone\v ProgOverview\v0\line\line\b How To...\b0\line\uldb Using the Toolbar\ulnone\v Toolbar\v0\line\line\b\f2\fs28 Commands\b0\line\uldb\f0\fs24 File Menu\ulnone\v File\v0\line\uldb Edit Menu\ulnone\v Edit\v0\line\uldb Options Menu\ulnone\v Options\v0\line\uldb Help Menu\ulnone\v Help\v0\line\uldb Keyboard\ulnone\v Keyboard\v0\line\par
\lang1024\page\pard\keepn #$KK\lang1033\b\f1\fs28 General \cf1 Overview\cf0\par
\pard\f0\fs24 Debug Event Browser\b0  (\b DEB\b0 ) is a Win32 application demonstrating the Win32 debug API.  This preliminary version of \b DEB\b0  only performs the most rudimentary debugging operations.  \b DEB\b0  is not a debugger in the traditional sense but a browser which merely displays the debug events occurring in a debuggee.  The handling of debug events is restricted only to those actions which are necessary to display event information and continue the debuggee.\line\line\i This Sample is brought to you by:\line   Microsoft Developer Support\line   Developed by Paul Tissue\line\i0\par
\lang1024\page\pard\keepn #$KKK\lang1033\b\f1\fs28 Programming Overview\par
\pard\b0\f0\fs24 The \b Debug Event Browser\b0  (\b DEB\b0 ) sample demonstrates the following Win32 debug API features:\line\line\uldb Debug Event Handler\ulnone\v Handler\v0\line\uldb Modifying a Thread's Context\ulnone\v Context\v0\line\uldb Reading the Executable's Header\ulnone\v Header\v0\line\par
\lang1024\page\pard\keepn #$KKKK\lang1033\b\f1\fs28 Debug Event Handler\par
\pard\b0\f0\fs24 The debug event handler is responsible for the processing of the debug events.\line\par
\pard\keep\f3\fs20 // ************************************************************************\line // FUNCTION : DebugEventThread( DWORD )\line // PURPOSE  : Main debug event processing loop\line // COMMENTS : The same debugger thread which creates a debuggee process or\line //            attaches to a currently running process must also handle all\line //            the debug events for that process.\line // ************************************************************************\line DWORD WINAPI\line DebugEventThread( DWORD UserDefinedValue )\line\{\line   DEBUG_EVENT DebugEvent;\line\line   for(;;) \{\line     if( !WaitForDebugEvent( &DebugEvent, INFINITE ) ) \line       continue;\line     switch( DebugEvent.dwDebugEventCode ) \{\line       case EXCEPTION_DEBUG_EVENT:\line         // ...\line         switch( DebugEvent.u.Exception.ExceptionRecord.ExceptionCode \line           case EXCEPTION_ACCESS_VIOLATION:\line             // ...handle exception\line             break;\line           case EXCEPTION_BREAKPOINT:\line             // ...handle exception\line             break;\line           //...\line           default:  // An unknown exception occurred\line             // ...handle exception\line             break;\line         \}\line       case CREATE_THREAD_DEBUG_EVENT:\line         // ...handle debug event\line         break;\line       case CREATE_PROCESS_DEBUG_EVENT:\line         // ...handle debug event\line         break;\line       // ...\line       default:\line         // ...handle debug event\line         break;\line     \}\line     //-- default action - just continue\line     ContinueDebugEvent( DebugEvent.dwProcessId, DebugEvent.dwThreadId,\line       DBG_CONTINUE );\line   \}\line\line   return( NULL );\line\}\line\par
\pard\lang1024\f0\fs24\page\pard\keepn #$KKKK\lang1033\b\f1\fs28 Reading the Executable's Header\par
\pard\b0\f0\fs24 Reading the information stored in the executable's headers is important for obtaining such things as symbolic information and details about the object.\line\line\par
\pard\keep\f3\fs20 // ************************************************************************\line // FUNCTION : GetModuleFileNameFromHeader( HANDLE, HANDLE, DWORD, LPTSTR, DWORD )\line // PURPOSE  : Retrieves the DLL module name for a given file handle of a\line //            the module.  Reads the module name from the EXE header.\line // COMMENTS :\line //   Retrieves only the module name and not the pathname.  Returns the\line //   number of characters copies to the buffer, else returns 0.\line // ************************************************************************\line DWORD\line GetModuleFileNameFromHeader( HANDLE hProcess, HANDLE hFile, DWORD BaseOfDll,\line   LPTSTR lpszPath, DWORD cchPath )\line\{\line   #define IMAGE_SECOND_HEADER_OFFSET    (15 * sizeof(ULONG)) // relative to file beginning\line   #define IMAGE_BASE_OFFSET             (13 * sizeof(DWORD)) // relative to PE header base\line   #define IMAGE_EXPORT_TABLE_RVA_OFFSET (30 * sizeof(DWORD)) // relative to PE header base\line   #define IMAGE_NAME_RVA_OFFSET         offsetof(IMAGE_EXPORT_DIRECTORY, Name)\line\line   WORD   DosSignature;\line   DWORD  NtSignature;\line   DWORD  dwNumberOfBytesRead = 0;\line   DWORD  PeHeader, ImageBase, ExportTableRVA, NameRVA;\line\line   //-- verify that the handle is not NULL\line   if( !hFile ) \{\line     lstrcpy( lpszPath, "Invalid File Handle" );\line     return( 0 );\line   \}\line\line   //-- verify that the handle is for a disk file\line   if( GetFileType(hFile) != FILE_TYPE_DISK ) \{\line     lstrcpy( lpszPath, "Invalid File Type" );\line     return( 0 );\line   \}\line\line   //-- Extract the filename from the EXE header\line   SetFilePointer( hFile, 0L, NULL, FILE_BEGIN );\line   ReadFile( hFile, &DosSignature, sizeof(DosSignature), &dwNumberOfBytesRead,\line     (LPOVERLAPPED) NULL);\line\line   //-- verify DOS signature found\line   if( DosSignature != IMAGE_DOS_SIGNATURE ) \{\line     wsprintf( lpszPath, TEXT( "Bad MZ Signature: 0x%x" ), DosSignature );\line     return( 0 );\line   \}\line\line   SetFilePointer( hFile, IMAGE_SECOND_HEADER_OFFSET, (LPLONG) NULL,\line     FILE_BEGIN );\line   ReadFile( hFile, &PeHeader, sizeof(PeHeader), &dwNumberOfBytesRead,\line     (LPOVERLAPPED) NULL );\line   SetFilePointer( hFile, PeHeader, (LPLONG) NULL, FILE_BEGIN );\line   ReadFile( hFile, &NtSignature, sizeof(NtSignature), &dwNumberOfBytesRead,\line     (LPOVERLAPPED) NULL);\line\line   //-- verify Windows NT (PE) signature found\line   if( NtSignature != IMAGE_NT_SIGNATURE ) \{\line     wsprintf( lpszPath, TEXT( "Bad PE Signature: 0x%x" ), DosSignature );\line     return( 0 );\line   \}\line\line   SetFilePointer( hFile, PeHeader + IMAGE_BASE_OFFSET, (LPLONG) NULL,\line     FILE_BEGIN );\line   ReadFile( hFile, &ImageBase, sizeof(ImageBase), &dwNumberOfBytesRead,\line     (LPOVERLAPPED) NULL);\line   SetFilePointer( hFile, PeHeader + IMAGE_EXPORT_TABLE_RVA_OFFSET,\line     (LPLONG) NULL, FILE_BEGIN );\line   ReadFile( hFile, &ExportTableRVA, sizeof(ExportTableRVA),\line     &dwNumberOfBytesRead, (LPOVERLAPPED) NULL);\line\line   //-- now read from the virtual address space in the process\line   ReadProcessMemory( hProcess,\line      (LPVOID) (BaseOfDll + ExportTableRVA + IMAGE_NAME_RVA_OFFSET),\line      &NameRVA, sizeof(NameRVA), &dwNumberOfBytesRead );\line   lstrcpy( lpszPath, "Empty!" );\line   if( !ReadProcessMemory( hProcess,\line          (LPVOID) (BaseOfDll + NameRVA),\line          lpszPath, cchPath, &dwNumberOfBytesRead ) )\line      lstrcpy( lpszPath, "Access Denied!" );\line\line   return( dwNumberOfBytesRead );\line\}\line\par
\pard\lang1024\f0\fs24\page\pard\keepn #$KKKKK\lang1033\b\f1\fs28 Modifying a Thread's Context\par
\pard\b0\f0\fs24 The ability to query and modify a thread's context is one of the more powerful features of the Win32 debug API set.\line\par
\pard\keep\f3\fs20 // ************************************************************************\line // FUNCTION : SkipThreadBreakPoint( HANDLE );\line // PURPOSE  : Skip over the break point instruction belonging to\line //            hThread.\line // COMMENTS :\line //   Only the MIPS R4x00 and Alpha AXP require this.\line // ************************************************************************\line BOOL\line SkipBreakPoint( HANDLE hThread )\line\{\line   static CONTEXT Context;\line\line   Context.ContextFlags = CONTEXT_CONTROL;\line   if( !GetThreadContext( hThread, &Context ) )\line     return( FALSE );\line   Context.Fir += 4L;  // Fir is the PC (program counter)\line                       // BREAK (breakpoint instruction) occupies 4 bytes\line   SetThreadContext( hThread, &Context );\line\line   return( TRUE );\line\}\line\par
\pard\lang1024\f0\fs24\page\pard\keepn #$K\lang1033\b\f1\fs28 How To Use The Toolbar\par
\pard\b0\f0\fs24 The Toolbar allows quick and convenient access to several \b Debug Event Browser\b0  options simply with the click of the mouse.\line\line\par
\pard\qc\lang1024\{bmc toolbar.bmp\}\par
\par
\pard\page\pard\keepn #$KK\lang1033\b\f1\fs28 File Menu Commands\par
\pard\b0\f0\fs24 Allows the user to select the debuggee for this application.\line\line\b Open...\b0\line Displays a dialog box that will allow you to open and run an executable file using a common dialog box.  This executable file will become the debuggee.\line\line\b Attach...\b0\line Displays a dialog box that will allow you to select a currently running process to attach to.  This process will become the debuggee.\line\line\b Exit\b0\line Exits the \b Debug Event Browser\b0  application.\line\par
\lang1024\page\pard\keepn #$KK\lang1033\b\f1\fs28 Edit Menu Commands\par
\pard\b0\f0\fs24 Allows the user to copy text to the clipboard.\line\line\b Cut\b0\line Copies the text in the Debug Event window and then delete it from the window.\line\line\b Copy\b0\line Copies the text in the Debug Event window.\line\line\b Delete\b0\line Deletes the text in the Debug Event window.\line\par
\lang1024\page\pard\keepn #$KK\lang1033\b\f1\fs28 Options Menu Commands\par
\pard\b0\f0\fs24 Allows the user to set various options and preferences for this application.\line\line\b Fonts...\b0\line Displays a dialog box that will allow you to set the font for the Debug Event window.\line\line\b Background Color...\b0\line Displays a dialog box that will allow you to set the background color for the Debug Event window.\line\line\b Preferences...\b0\line Displays a dialog box that will allow you to set the options and preferences for this application.\line\line\b Toolbar\b0\line Displays the Tool Bar when checked.\line\line\b Use Saved Directory\b0\line This menu option will set the default directory to the one that was previously saved.  This only occurs when checked.\line\line\b Save Settings On Exit\b0\line This menu option will save all the current session settings upon exiting. This only occurs when checked.\line\line\b Save Settings Now\b0\line This menu option will save all the current session settings now.\par
\lang1024\page\pard\keepn #$KK\lang1033\b\f1\fs28 Help Menu Commands\par
\pard\b0\f0\fs24 Displays various types of information regarding to the \b Debug Event Browser\b0  application.\line\line\b Contents\b0\line Displays the contents of the Online Help.\line\line\b Search for Help on...\b0\line Displays a list of keywords to search for Online Help topics.\line\line\b How to use Help\b0\line Displays the instructions for using the Online Help facilities.\line\line\b About Debug Event Browser...\b0\line Displays product information about the \b Debug Event Browser\b0 .\line\par
\lang1024\page\pard\keepn #$K\lang1033\b\f1\fs28 Keyboard Commands\par
\pard\b0\f0\fs24 The keyboard commands allows quick and convenient access to several \b Debug Event Browser\b0  options using simple key combinations.\line\line\ul Control Keys\ulnone\line\line\b Ctrl+A\b0\line Attaches to a currently running process and begins debugging it.\line\line\b Ctrl+C\b0\line Copies the text in the Debug Event window.\line\line\b Ctrl+O\b0\line Opens an executable and debugs it.\line\line\b Ctrl+X\b0\line Copies the text in the Debug Event window and then delete it from the window.\line\line\ul Alternate Keys\ulnone\line\line\b Alt+F4\b0\line Exits the \b Debug Event Browser\b0 .\line\line\ul Single Keys\ulnone\line\line\b F1\b0\line Invokes the help file for the \b Debug Event Browser\b0 .\line\line\b Del\b0\line Deletes the text in the Debug Event window.\line\par
\lang1024\par
}
 